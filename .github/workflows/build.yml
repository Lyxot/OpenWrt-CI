name: OpenWrt-CI

on:
  workflow_dispatch:
    inputs:
      enable_debug:
        description: 'Enable Debug Session'
        required: false
        type: boolean
        default: false
  schedule:
    - cron: '0 20 * * 0,4'

jobs:
  check_update:
    name: Check Update
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.check_update.outputs.tag }}
      commit: ${{ steps.check_update.outputs.commit }}
    steps:
      - name: Check
        id: check_update
        run: |
          export tag=$(curl -s "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest" | jq -r '.name')
          export commit=$(curl -s 'https://api.github.com/repos/immortalwrt/immortalwrt/commits/master' | jq -r '.sha' | cut -c1-7)
          echo "tag=$tag" | tee -a $GITHUB_OUTPUT
          echo "commit=$commit" | tee -a $GITHUB_OUTPUT

  build_openwrt:
    name: Build OpenWrt Firmware
    runs-on: ubuntu-24.04
    needs: check_update
    if: needs.check_update.outputs.tag != needs.check_update.outputs.commit
    steps:
      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 64

      - name: Set tmpfs
        run: sudo mount -t tmpfs -o size=64G tmpfs .

      - name: Checkout OpenWrt
        uses: actions/checkout@v4
        with:
          repository: immortalwrt/immortalwrt

      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ./.ccache
            ./dl
          key: immortalwrt-ccache

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          df -h

      - name: Patch
        run: |
          wget https://github.com/$GITHUB_REPOSITORY/raw/refs/heads/main/setmirrors.py
          python3 setmirrors.py
          if ! grep -q "CONFIG_X86_SGX" target/linux/x86/64/config-6.6; then
            echo "# CONFIG_X86_SGX is not set" >> target/linux/x86/64/config-6.6
          fi

      - name: Setup Debug Session
        if: github.event.inputs.enable_debug == 'true'
        uses: mxschmitt/action-tmate@v3

      - name: Update feeds
        run: |
          sed -i '$a src-git smpackage https://github.com/kenzok8/small-package' feeds.conf.default
          ./scripts/feeds update -a
          rm -rf feeds/smpackage/{base-files,dnsmasq,firewall*,fullconenat,libnftnl,nftables,ppp,opkg,ucl,upx,vsftpd*,miniupnpd-iptables,wireless-regdb}
          ./scripts/feeds install -a
          
      - name: Download configuration file
        run: |
          wget https://github.com/$GITHUB_REPOSITORY/raw/refs/heads/main/.config
          cp .config .config.raw
          make defconfig
          diff .config .config.raw || :

      - name: Download packages
        run: make download V=s -j1

      - name: Build toolchain
        run: |
          make V=s -j1 toolchain/binutils/prepare
          make V=s -j$(nproc) toolchain/binutils/compile || (rm -rf build_dir/toolchain*/gdb* && make download && make V=s -j1 toolchain/binutils/prepare && make V=s -j1 toolchain/binutils/compile)
          make V=s -j1 toolchain/nasm/prepare
          make V=s -j$(nproc) toolchain/nasm/compile || (rm -rf build_dir/toolchain*/nasm* && make download && make V=s -j1 toolchain/nasm/prepare && make V=s -j1 toolchain/nasm/compile)

      - name: Compile OpenWrt
        run: |
          alias mkdir='mkdir -p'
          make V=s -j$(nproc) || make V=s -j$(nproc) || make V=s -j1
          export latest_tag=$(curl -s "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest" | jq -r '.name')
          echo "**Update Time**: $(TZ=Asia/Shanghai date -Iseconds)" > changelog.md
          echo "**Full Changelog**: https://github.com/immortalwrt/immortalwrt/compare/$latest_tag...$(git rev-parse --short HEAD)" >> changelog.md

      - name: Clean up
        id: clean
        run: |
          rm -rf staging_dir/target*
          rm -rf build_dir/target*
          echo "release_name=$(git rev-parse --short HEAD)" | tee -a $GITHUB_OUTPUT
          echo "release_tag=$(curl -s 'https://api.github.com/repos/immortalwrt/immortalwrt/tags' | jq -r '.[0].name')" | tee -a $GITHUB_OUTPUT
          echo "cache=true" >> $GITHUB_OUTPUT
          if [ $(du dl .ccache -scm | grep total | awk '{print $1}') -gt 10240 ]; then
            echo "cache=false" | tee -a $GITHUB_OUTPUT
          fi
          du dl .ccache -sch
          ls bin/targets/x86/64
          df -h

      - name: Upload buildinfo
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_buildinfo
          path: ./bin/targets/x86/64/*.buildinfo

      - name: Save cache
        if: steps.clean.outputs.cache == 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            ./.ccache
            ./dl
          key: immortalwrt-ccache-${{ hashFiles('./bin/targets/x86/64/immortalwrt-x86-64-generic-rootfs.tar.gz') }}

      - name: Upload ext4 images
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_ext4_images
          path: |
            ./bin/targets/x86/64/immortalwrt-x86-64-generic-ext4-combined-efi.*

      - name: Upload squashfs images
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_squashfs_images
          path: |
            ./bin/targets/x86/64/immortalwrt-x86-64-generic-squashfs-combined-efi.*

      - name: Upload rootfs
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_rootfs
          path: ./bin/targets/x86/64/immortalwrt-x86-64-generic-rootfs.tar.gz

      - name: Prepare release
        run: |
          mkdir -p release
          mv ./bin/targets/x86/64/immortalwrt-x86-64-generic-ext4-combined-efi.* release/
          mv ./bin/targets/x86/64/immortalwrt-x86-64-generic-squashfs-combined-efi.* release/
          mv ./bin/targets/x86/64/immortalwrt-x86-64-generic-rootfs.tar.gz release/

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          bodyFile: "changelog.md"
          name: ${{ steps.clean.outputs.release_name }}
          tag: ${{ steps.clean.outputs.release_tag }}
          makeLatest: true
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "release/*"
